const express = require('express');
const TelegramBot = require('node-telegram-bot-api');
const axios = require('axios');
const cron = require('node-cron');

const app = express();
app.use(express.json());

// Environment variables
const BOT_TOKEN = process.env.BOT_TOKEN;
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID;
const VERCEL_URL = process.env.VERCEL_URL;
const AFFILIATE_LINK = process.env.AFFILIATE_LINK || 'https://mostbet-king.com/5rTs';

const bot = new TelegramBot(BOT_TOKEN, { polling: false });

// Storage
let users = {};
let stats = { total: 0, registered: 0, deposited: 0 };
let postbackData = { registrations: {}, deposits: {}, approvedDeposits: {} };

// ALL 5 LANGUAGES
const languages = {
  en: {
    name: "English", flag: "ЁЯЗ║ЁЯЗ╕",
    welcome: "тЬЕ You selected English!",
    selectLanguage: "Select your preferred language:",
    step1: "ЁЯМР Step 1 - Register", mustNew: "тА╝я╕П THE ACCOUNT MUST BE NEW",
    instructions: `1я╕ПтГг If after clicking "REGISTER" you get old account, logout and click again\n\n2я╕ПтГг Use promocode: CLAIM\n\n3я╕ПтГг Deposit minimum 600тВ╣ or 6$`,
    enterPlayerId: "Please enter your Mostbet Player ID to verify:",
    howToFind: "ЁЯУЭ How to find Player ID:\n1. Login to Mostbet\n2. Go to Profile Settings\n3. Copy Player ID\n4. Paste here",
    congratulations: "Congratulations! Select Your Game Mode:",
    notRegistered: "тЭМ You're Not Registered!\nClick REGISTER first and complete registration.",
    registeredNoDeposit: `ЁЯОЙ Registration Complete!\nтЬЕ Account synchronized\nЁЯТ┤ Deposit at least 600тВ╣ or $6 for signals\nЁЯХ╣я╕П After deposit, click CHECK DEPOSIT`,
    limitReached: "ЁЯУК Daily Limit Reached!\nЁЯХР Try tomorrow or deposit 400тВ╣/4$ to continue",
    checking: "ЁЯФН Checking registration...", verified: "тЬЕ Verified!",
    depositRequired: "ЁЯТ│ Deposit Required", welcomeBack: "ЁЯСЛ Welcome back!"
  },
  hi: {
    name: "рд╣рд┐рдВрджреА", flag: "ЁЯЗоЁЯЗ│",
    welcome: "тЬЕ рдЖрдкрдиреЗ рд╣рд┐рдВрджреА рдЪреБрдиреА!",
    selectLanguage: "рдЕрдкрдиреА рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ:",
    step1: "ЁЯМР рд╕реНрдЯреЗрдк 1 - рд░рдЬрд┐рд╕реНрдЯрд░ рдХрд░реЗрдВ", mustNew: "тА╝я╕П рдЕрдХрд╛рдЙрдВрдЯ рдирдпрд╛ рд╣реЛрдирд╛ рдЪрд╛рд╣рд┐рдП",
    instructions: `1я╕ПтГг рдЕрдЧрд░ рдкреБрд░рд╛рдирд╛ рдЕрдХрд╛рдЙрдВрдЯ рдЖрдП рддреЛ рд▓реЙрдЧрдЖрдЙрдЯ рдХрд░ рдлрд┐рд░ рд╕реЗ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ\n\n2я╕ПтГг рдкреНрд░реЛрдореЛрдХреЛрдб: CLAIM\n\n3я╕ПтГг рдиреНрдпреВрдирддрдо 600тВ╣ рдпрд╛ 6$ рдЬрдорд╛ рдХрд░реЗрдВ`,
    enterPlayerId: "рдЕрдкрдирд╛ Player ID рджрд░реНрдЬ рдХрд░реЗрдВ:",
    howToFind: "ЁЯУЭ Player ID рдвреВрдВрдвреЗрдВ:\n1. Mostbet рдореЗрдВ рд▓реЙрдЧрд┐рди\n2. рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрд┐рдВрдЧ\n3. Player ID рдХреЙрдкреА\n4. рдпрд╣рд╛рдБ рдкреЗрд╕реНрдЯ",
    congratulations: "рдмрдзрд╛рдИ! рдЧреЗрдо рдореЛрдб рдЪреБрдиреЗрдВ:",
    notRegistered: "тЭМ рдЖрдк рд░рдЬрд┐рд╕реНрдЯрд░реНрдб рдирд╣реАрдВ!\nрдкрд╣рд▓реЗ REGISTER рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ",
    registeredNoDeposit: `ЁЯОЙ рд░рдЬрд┐рд╕реНрдЯреНрд░реЗрд╢рди рдкреВрд░рд╛!\nтЬЕ рдЕрдХрд╛рдЙрдВрдЯ рд╕рд┐рдВрдХ рд╣реБрдЖ\nЁЯТ┤ рд╕рд┐рдЧреНрдирд▓ рдХреЗ рд▓рд┐рдП 600тВ╣ рдпрд╛ $6 рдЬрдорд╛ рдХрд░реЗрдВ\nЁЯХ╣я╕П рдЬрдорд╛ рдХреЗ рдмрд╛рдж CHECK DEPOSIT рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ`,
    limitReached: "ЁЯУК рджреИрдирд┐рдХ рд╕реАрдорд╛ рдкреВрд░реА!\nЁЯХР рдХрд▓ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВ рдпрд╛ 400тВ╣/4$ рдЬрдорд╛ рдХрд░реЗрдВ",
    checking: "ЁЯФН рдЬрд╛рдВрдЪ рд╣реЛ рд░рд╣реА...", verified: "тЬЕ рд╕рддреНрдпрд╛рдкрд┐рдд!",
    depositRequired: "ЁЯТ│ рдЬрдорд╛ рдЖрд╡рд╢реНрдпрдХ", welcomeBack: "ЁЯСЛ рд╡рд╛рдкрд╕реА рдкрд░ рд╕реНрд╡рд╛рдЧрдд!"
  },
  bn: {
    name: "ржмрж╛ржВрж▓рж╛", flag: "ЁЯЗзЁЯЗй",
    welcome: "тЬЕ ржЖржкржирж┐ ржмрж╛ржВрж▓рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзЗржЫрзЗржи!",
    selectLanguage: "ржЖржкржирж╛рж░ ржнрж╛рж╖рж╛ ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
    step1: "ЁЯМР ржзрж╛ржк 1 - ржирж┐ржмржирзНржзржи", mustNew: "тА╝я╕П ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржирждрзБржи рж╣рждрзЗ рж╣ржмрзЗ",
    instructions: `1я╕ПтГг ржкрзБрж░рж╛ржирзЛ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ ржЖрж╕рж▓рзЗ рж▓ржЧржЖржЙржЯ ржХрж░рзЗ ржЖржмрж╛рж░ ржХрзНрж▓рж┐ржХ ржХрж░рзБржи\n\n2я╕ПтГг ржкрзНрж░ржорзЛржХрзЛржб: CLAIM\n\n3я╕ПтГг ржирзНржпрзВржирждржо 600тВ╣ ржмрж╛ 6$ ржЬржорж╛ ржХрж░рзБржи`,
    enterPlayerId: "ржЖржкржирж╛рж░ Player ID рж▓рж┐ржЦрзБржи:",
    howToFind: "ЁЯУЭ Player ID ржЦрзБржБржЬрзБржи:\n1. Mostbet ржП рж▓ржЧржЗржи\n2. ржкрзНрж░рзЛржлрж╛ржЗрж▓ рж╕рзЗржЯрж┐ржВрж╕\n3. Player ID ржХржкрж┐\n4. ржПржЦрж╛ржирзЗ ржкрзЗрж╕рзНржЯ",
    congratulations: "ржЕржнрж┐ржиржирзНржжржи! ржЧрзЗржо ржорзЛржб ржирж┐рж░рзНржмрж╛ржЪржи ржХрж░рзБржи:",
    notRegistered: "тЭМ ржЖржкржирж┐ ржирж┐ржмржирзНржзрж┐ржд ржиржи!\nржкрзНрж░ржержорзЗ REGISTER ржХрзНрж▓рж┐ржХ ржХрж░рзБржи",
    registeredNoDeposit: `ЁЯОЙ ржирж┐ржмржирзНржзржи рж╕ржорзНржкрзВрж░рзНржг!\nтЬЕ ржЕрзНржпрж╛ржХрж╛ржЙржирзНржЯ рж╕рж┐ржЩрзНржХ\nЁЯТ┤ рж╕рж┐ржЧржирзНржпрж╛рж▓рзЗрж░ ржЬржирзНржп 600тВ╣ ржмрж╛ $6 ржЬржорж╛\nЁЯХ╣я╕П ржЬржорж╛рж░ ржкрж░ CHECK DEPOSIT ржХрзНрж▓рж┐ржХ`,
    limitReached: "ЁЯУК ржжрзИржирж┐ржХ рж╕рзАржорж╛ рж╢рзЗрж╖!\nЁЯХР ржЖржЧрж╛ржорзАржХрж╛рж▓ ржЪрзЗрж╖рзНржЯрж╛ ржмрж╛ 400тВ╣/4$ ржЬржорж╛",
    checking: "ЁЯФН ржкрж░рзАржХрзНрж╖рж╛ ржХрж░рж╛ рж╣ржЪрзНржЫрзЗ...", verified: "тЬЕ ржпрж╛ржЪрж╛ржЗржХрзГржд!",
    depositRequired: "ЁЯТ│ ржЬржорж╛ ржкрзНрж░ржпрж╝рзЛржЬржи", welcomeBack: "ЁЯСЛ ржлрж┐рж░рзЗ ржЖрж╕рж╛рж░ рж╕рзНржмрж╛ржЧрждржо!"
  },
  ur: {
    name: "╪з╪▒╪п┘И", flag: "ЁЯЗ╡ЁЯЗ░",
    welcome: "тЬЕ ╪в┘╛ ┘Ж█Т ╪з╪▒╪п┘И ┘Е┘Ж╪к╪о╪и ┌й█М!",
    selectLanguage: "╪з┘╛┘Ж█М ╪▓╪и╪з┘Ж ┘Е┘Ж╪к╪о╪и ┌й╪▒█М┌║:",
    step1: "ЁЯМР ┘Е╪▒╪н┘Д█Б 1 - ╪▒╪м╪│┘╣╪▒", mustNew: "тА╝я╕П ╪з┌й╪з╪д┘Ж┘╣ ┘Ж█М╪з █Б┘И┘Ж╪з ┌Ж╪з█Б█М█Т",
    instructions: `1я╕ПтГг ┘╛╪▒╪з┘Ж╪з ╪з┌й╪з╪д┘Ж┘╣ ╪в╪ж█Т ╪к┘И ┘Д╪з┌п ╪в╪д┘╣ ┌й╪▒ ┌й█Т ╪п┘И╪и╪з╪▒█Б ┌й┘Д┌й\n\n2я╕ПтГг ┘╛╪▒┘И┘Е┘И┌й┘И┌И: CLAIM\n\n3я╕ПтГг ┌й┘Е ╪з╪▓ ┌й┘Е 600тВ╣ █М╪з 6$ ╪м┘Е╪╣`,
    enterPlayerId: "╪з┘╛┘Ж╪з Player ID ╪п╪▒╪м:",
    howToFind: "ЁЯУЭ Player ID ┌И┌╛┘И┘Ж┌И█М┌║:\n1. Mostbet ┘Д╪з┌п ╪з┘Ж\n2. ┘╛╪▒┘И┘Б╪з╪ж┘Д ╪│█М┘╣┘Ж┌п\n3. Player ID ┌й╪з┘╛█М\n4. █М█Б╪з┌║ ┘╛█М╪│┘╣",
    congratulations: "┘Е╪и╪з╪▒┌й! ┌п█М┘Е ┘Е┘И┌И ┘Е┘Ж╪к╪о╪и:",
    notRegistered: "тЭМ ╪в┘╛ ╪▒╪м╪│┘╣╪▒┌И ┘Ж█Б█М┌║!\n┘╛█Б┘Д█Т REGISTER ┌й┘Д┌й",
    registeredNoDeposit: `ЁЯОЙ ╪▒╪м╪│┘╣╪▒█М╪┤┘Ж ┘Е┌й┘Е┘Д!\nтЬЕ ╪з┌й╪з╪д┘Ж┘╣ sync\nЁЯТ┤ ╪│┌п┘Ж┘Д ┌й█Т ┘Д█М█Т 600тВ╣ █М╪з $6 ╪м┘Е╪╣\nЁЯХ╣я╕П ╪м┘Е╪╣ ┌й█Т ╪и╪╣╪п CHECK DEPOSIT ┌й┘Д┌й`,
    limitReached: "ЁЯУК ╪▒┘И╪▓╪з┘Ж█Б ╪н╪п ┘Е┌й┘Е┘Д!\nЁЯХР ┌й┘Д ┌й┘И╪┤╪┤ █М╪з 400тВ╣/4$ ╪м┘Е╪╣",
    checking: "ЁЯФН ┌Ж█М┌й █Б┘И ╪▒█Б╪з...", verified: "тЬЕ ╪к╪╡╪п█М┘В!",
    depositRequired: "ЁЯТ│ ╪м┘Е╪╣ ╪╢╪▒┘И╪▒█М", welcomeBack: "ЁЯСЛ ┘И╪з┘╛╪│█М ┘╛╪▒ ╪о┘И╪┤ ╪в┘Е╪п█М╪п!"
  },
  ne: {
    name: "рдиреЗрдкрд╛рд▓реА", flag: "ЁЯЗ│ЁЯЗ╡",
    welcome: "тЬЕ рддрдкрд╛рдИрдВрд▓реЗ рдиреЗрдкрд╛рд▓реА рдЪрдпрди рдЧрд░реНрдиреБрднрдпреЛ!",
    selectLanguage: "рдЖрдлреНрдиреЛ рднрд╛рд╖рд╛ рдЪрдпрди:",
    step1: "ЁЯМР рдЪрд░рдг 1 - рджрд░реНрддрд╛", mustNew: "тА╝я╕П рдЦрд╛рддрд╛ рдирдпрд╛рдБ рд╣реБрдиреБрдкрд░реНрдЫ",
    instructions: `1я╕ПтГг рдкреБрд░рд╛рдиреЛ рдЦрд╛рддрд╛ рдЖрдпреЛ рднрдиреЗ рд▓рдЧрдЖрдЙрдЯ рдЧрд░реЗрд░ рдлреЗрд░рд┐ рдХреНрд▓рд┐рдХ\n\n2я╕ПтГг рдкреНрд░реЛрдореЛрдХреЛрдб: CLAIM\n\n3я╕ПтГг рдХрдореНрддрд┐рдорд╛ 600тВ╣ рд╡рд╛ 6$ рдЬрдореНрдорд╛`,
    enterPlayerId: "рдЖрдлреНрдиреЛ Player ID рдкреНрд░рд╡рд┐рд╖реНрдЯ:",
    howToFind: "ЁЯУЭ Player ID рдЦреЛрдЬ:\n1. Mostbet рд▓рдЧрдЗрди\n2. рдкреНрд░реЛрдлрд╛рдЗрд▓ рд╕реЗрдЯрд┐рдЩ\n3. Player ID рдХрдкреА\n4. рдпрд╣рд╛рдБ рдкреЗрд╕реНрдЯ",
    congratulations: "рдмрдзрд╛рдИ! рдЦреЗрд▓ рдореЛрдб рдЪрдпрди:",
    notRegistered: "тЭМ рддрдкрд╛рдИрдВ рджрд░реНрддрд╛ рдЧрд░рд┐рдПрдХреЛ рдЫреИрди!\nрдкрд╣рд┐рд▓реЗ REGISTER рдХреНрд▓рд┐рдХ",
    registeredNoDeposit: `ЁЯОЙ рджрд░реНрддрд╛ рдкреВрд░рд╛!\nтЬЕ рдЦрд╛рддрд╛ рд╕рд┐рдЩреНрдХ\nЁЯТ┤ рд╕рд┐рдЧреНрдирд▓рдХреЛ рд▓рд╛рдЧрд┐ 600тВ╣ рд╡рд╛ $6 рдЬрдореНрдорд╛\nЁЯХ╣я╕П рдЬрдореНрдорд╛ рдкрдЫрд┐ CHECK DEPOSIT рдХреНрд▓рд┐рдХ`,
    limitReached: "ЁЯУК рджреИрдирд┐рдХ рд╕реАрдорд╛ рдкреВрд░рд╛!\nЁЯХР рднреЛрд▓реА рдкреНрд░рдпрд╛рд╕ рд╡рд╛ 400тВ╣/4$ рдЬрдореНрдорд╛",
    checking: "ЁЯФН рдЬрд╛рдБрдЪ рдЧрд░рд┐рджреИ...", verified: "тЬЕ рд╕рддреНрдпрд╛рдкрд┐рдд!",
    depositRequired: "ЁЯТ│ рдЬрдореНрдорд╛ рдЖрд╡рд╢реНрдпрдХ", welcomeBack: "ЁЯСЛ рдлрд░реНрдХрд┐рдиреБрднрдПрдХреЛрдорд╛ рд╕реНрд╡рд╛рдЧрдд!"
  }
};

// ALL PREDICTION IMAGES
const predictionImages = {
  easy: [
    { url: "https://i.postimg.cc/dQS5pr0N/IMG-20251020-095836-056.jpg", accuracy: "85%" },
    { url: "https://i.postimg.cc/P5BxR3GJ/IMG-20251020-095841-479.jpg", accuracy: "95%" },
    { url: "https://i.postimg.cc/QdWN1QBr/IMG-20251020-095848-018.jpg", accuracy: "78%" },
    { url: "https://i.postimg.cc/gjJmJ89H/IMG-20251020-095902-112.jpg", accuracy: "85%" },
    { url: "https://i.postimg.cc/QMJ3J0hQ/IMG-20251020-095906-484.jpg", accuracy: "70%" },
    { url: "https://i.postimg.cc/654xm9BR/IMG-20251020-095911-311.jpg", accuracy: "80%" },
    { url: "https://i.postimg.cc/NMCZdnVX/IMG-20251020-095916-536.jpg", accuracy: "82%" },
    { url: "https://i.postimg.cc/8k3qWqLk/IMG-20251020-095921-307.jpg", accuracy: "88%" },
    { url: "https://i.postimg.cc/pdqSd72R/IMG-20251020-095926-491.jpg", accuracy: "75%" },
    { url: "https://i.postimg.cc/05T9x6WH/IMG-20251020-095937-768.jpg", accuracy: "90%" },
    { url: "https://i.postimg.cc/CKrV2dnv/IMG-20251020-095949-124.jpg", accuracy: "83%" },
    { url: "https://i.postimg.cc/L5dGdP9Y/IMG-20251020-095954-011.jpg", accuracy: "79%" },
    { url: "https://i.postimg.cc/FHF8QN4f/IMG-20251020-100002-472.jpg", accuracy: "86%" },
    { url: "https://i.postimg.cc/25MKvWBg/IMG-20251020-100012-671.jpg", accuracy: "81%" },
    { url: "https://i.postimg.cc/4ybLrF2D/IMG-20251020-100023-691.jpg", accuracy: "87%" },
    { url: "https://i.postimg.cc/vZmqNhrP/IMG-20251020-100033-810.jpg", accuracy: "84%" },
    { url: "https://i.postimg.cc/8cDwBmk3/IMG-20251020-100038-185.jpg", accuracy: "77%" },
    { url: "https://i.postimg.cc/7YKX0zFL/IMG-20251020-100045-990.jpg", accuracy: "89%" },
    { url: "https://i.postimg.cc/ZRzL4xNb/IMG-20251020-100053-162.jpg", accuracy: "76%" },
    { url: "https://i.postimg.cc/9QvdYYJb/IMG-20251020-100113-609.jpg", accuracy: "91%" }
  ],
  medium: [
    { url: "https://i.postimg.cc/JnJPX4J6/IMG-20251020-104414-537.jpg", accuracy: "85%" },
    { url: "https://i.postimg.cc/ZnHPP9qJ/IMG-20251020-104430-876.jpg", accuracy: "82%" },
    { url: "https://i.postimg.cc/Z528LzJ2/IMG-20251020-104435-861.jpg", accuracy: "88%" },
    { url: "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", accuracy: "83%" },
    { url: "https://i.postimg.cc/dVykwkKH/IMG-20251020-104443-615.jpg", accuracy: "87%" },
    { url: "https://i.postimg.cc/MHHH4XDw/IMG-20251020-104452-202.jpg", accuracy: "84%" },
    { url: "https://i.postimg.cc/6pn3FkdL/IMG-20251020-104458-282.jpg", accuracy: "86%" },
    { url: "https://i.postimg.cc/85PzJsqD/IMG-20251020-104509-839.jpg", accuracy: "81%" },
    { url: "https://i.postimg.cc/bN2N27Vm/IMG-20251020-104521-438.jpg", accuracy: "89%" },
    { url: "https://i.postimg.cc/0NZ8sPrV/IMG-20251020-104526-899.jpg", accuracy: "85%" },
    { url: "https://i.postimg.cc/T2KWCHHs/IMG-20251020-104532-810.jpg", accuracy: "82%" },
    { url: "https://i.postimg.cc/ZqYW3fdX/IMG-20251020-104537-998.jpg", accuracy: "88%" },
    { url: "https://i.postimg.cc/wxR7hR7w/IMG-20251020-104543-014.jpg", accuracy: "83%" },
    { url: "https://i.postimg.cc/3x1RKgcx/IMG-20251020-104615-327.jpg", accuracy: "87%" }
  ],
  hard: [
    { url: "https://i.postimg.cc/4N8qsy1c/IMG-20251020-105355-761.jpg", accuracy: "85%" },
    { url: "https://i.postimg.cc/tJ4njBXg/IMG-20251020-104439-671.jpg", accuracy: "82%" },
    { url: "https://i.postimg.cc/8cpXVgJ4/IMG-20251020-105410-692.jpg", accuracy: "88%" },
    { url: "https://i.postimg.cc/HsLvZH1t/IMG-20251020-105415-479.jpg", accuracy: "83%" },
    { url: "https://i.postimg.cc/90gb5RH8/IMG-20251020-105424-630.jpg", accuracy: "87%" },
    { url: "https://i.postimg.cc/HL12g1F1/IMG-20251020-105428-916.jpg", accuracy: "84%" },
    { url: "https://i.postimg.cc/hjpbTzvJ/IMG-20251020-105436-994.jpg", accuracy: "86%" },
    { url: "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", accuracy: "81%" },
    { url: "https://i.postimg.cc/bJN1yygc/IMG-20251020-105450-320.jpg", accuracy: "89%" },
    { url: "https://i.postimg.cc/DfSBL6Q8/IMG-20251020-105458-348.jpg", accuracy: "85%" },
    { url: "https://i.postimg.cc/zDHFVB5B/IMG-20251020-105512-639.jpg", accuracy: "82%" }
  ],
  hardcore: [
    { url: "https://i.postimg.cc/NMcBmFVb/IMG-20251020-110213-026.jpg", accuracy: "85%" },
    { url: "https://i.postimg.cc/xjgnN0P6/IMG-20251020-110218-479.jpg", accuracy: "82%" },
    { url: "https://i.postimg.cc/FsBvGD8p/IMG-20251020-110222-741.jpg", accuracy: "88%" },
    { url: "https://i.postimg.cc/RVj17zSJ/IMG-20251020-105443-517.jpg", accuracy: "83%" },
    { url: "https://i.postimg.cc/pTRMy75V/IMG-20251020-110240-031.jpg", accuracy: "87%" },
    { url: "https://i.postimg.cc/VvZxGkGs/IMG-20251020-110255-468.jpg", accuracy: "84%" }
  ]
};

// 1Win Postback
app.get('/lwin-postback', (req, res) => {
  const { player_id, status, amount } = req.query;
  
  if (status === 'registration') {
    postbackData.registrations[player_id] = { player_id, status: 'registered', deposited: false };
    console.log(`тЬЕ Registration: ${player_id}`);
  } else if (status === 'fdp') {
    postbackData.deposits[player_id] = { player_id, status: 'deposited', amount };
    if (postbackData.registrations[player_id]) {
      postbackData.registrations[player_id].deposited = true;
    }
    console.log(`ЁЯТ░ Deposit: ${player_id}, Amount: ${amount}`);
  } else if (status === 'fd_approved') {
    postbackData.approvedDeposits[player_id] = { player_id, status: 'approved', amount };
    console.log(`ЁЯОЙ Approved: ${player_id}, Amount: ${amount}`);
  }
  
  res.json({ success: true, player_id, status });
});

// Player verification
app.get('/verify-player/:playerId', (req, res) => {
  const playerId = req.params.playerId;
  const registration = postbackData.registrations[playerId];
  const deposit = postbackData.deposits[playerId];
  const approved = postbackData.approvedDeposits[playerId];
  
  res.json({
    isRegistered: !!registration,
    hasDeposit: !!deposit,
    isApproved: !!approved,
    registrationData: registration,
    depositData: deposit,
    approvedData: approved
  });
});

// Webhook route
app.post('/webhook', (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// Setup webhook automatically
async function setupWebhook() {
  try {
    await bot.setWebHook(`${VERCEL_URL}/webhook`);
    console.log('тЬЕ Webhook set:', `${VERCEL_URL}/webhook`);
  } catch (error) {
    console.log('тЭМ Webhook error:', error.message);
  }
}

// Admin notification
async function sendAdminNotification(message) {
  try {
    await bot.sendMessage(ADMIN_CHAT_ID, 
      `ЁЯдЦ BOT NOTIFICATION\n${message}\n\n` +
      `ЁЯУК STATS: Total: ${stats.total} | Registered: ${stats.registered} | Deposited: ${stats.deposited}`
    );
  } catch (error) {
    console.log('Admin notification failed');
  }
}

// Start command
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id.toString();
  const userName = msg.from.first_name || 'User';
  
  if (!users[userId]) {
    users[userId] = {
      id: userId,
      language: 'en',
      registered: false,
      deposited: false,
      playerId: null,
      predictionsUsed: 0,
      joinedAt: new Date().toISOString(),
      lastActive: new Date().toISOString()
    };
    stats.total++;
    await sendAdminNotification(`ЁЯЖХ NEW USER: ${userName} (${userId})\nTotal: ${stats.total}`);
  } else {
    users[userId].lastActive = new Date().toISOString();
  }

  const lang = users[userId].language;
  
  const options = {
    reply_markup: {
      inline_keyboard: [
        [{ text: `${languages.en.flag} ${languages.en.name}`, callback_data: 'lang_en' }],
        [{ text: `${languages.hi.flag} ${languages.hi.name}`, callback_data: 'lang_hi' }],
        [{ text: `${languages.bn.flag} ${languages.bn.name}`, callback_data: 'lang_bn' }],
        [{ text: `${languages.ur.flag} ${languages.ur.name}`, callback_data: 'lang_ur' }],
        [{ text: `${languages.ne.flag} ${languages.ne.name}`, callback_data: 'lang_ne' }]
      ]
    }
  };

  if (users[userId].language !== 'en') {
    bot.sendMessage(chatId, languages[lang].welcomeBack);
  }
  
  bot.sendMessage(chatId, languages[lang].selectLanguage, options);
});

// Handle callbacks
bot.on('callback_query', async (callbackQuery) => {
  const msg = callbackQuery.message;
  const data = callbackQuery.data;
  const userId = callbackQuery.from.id.toString();
  const user = users[userId];
  const lang = user.language;

  try {
    if (data.startsWith('lang_')) {
      const newLang = data.split('_')[1];
      user.language = newLang;
      
      await bot.editMessageText(languages[newLang].welcome, {
        chat_id: msg.chat.id,
        message_id: msg.message_id
      });

      const registerOptions = {
        reply_markup: {
          inline_keyboard: [
            [{ text: "ЁЯУ▓ Register", url: AFFILIATE_LINK }],
            [{ text: "ЁЯФН Check Registration", callback_data: 'check_registration' }]
          ]
        }
      };

      await bot.sendMessage(msg.chat.id, 
        `${languages[newLang].step1}\n\n${languages[newLang].mustNew}\n\n${languages[newLang].instructions}`, 
        registerOptions
      );
    }
    
    else if (data === 'check_registration') {
      await bot.sendMessage(msg.chat.id, 
        `${languages[lang].enterPlayerId}\n\n${languages[lang].howToFind}`
      );
    }
    
    else if (data.startsWith('mode_')) {
      const mode = data.split('_')[1];
      user.currentMode = mode;
      user.predictionsUsed = 0;
      
      await sendPrediction(msg.chat.id, userId, mode, 1);
    }
    
    else if (data.startsWith('next_')) {
      const mode = data.split('_')[1];
      user.predictionsUsed++;
      
      if (user.predictionsUsed >= 20) {
        await bot.sendMessage(msg.chat.id, languages[lang].limitReached, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "ЁЯХР Try Tomorrow", callback_data: 'try_tomorrow' }],
              [{ text: "ЁЯТ│ Deposit Again", url: AFFILIATE_LINK }]
            ]
          }
        });
      } else {
        await sendPrediction(msg.chat.id, userId, mode, user.predictionsUsed + 1);
      }
    }
    
    else if (data === 'prediction_menu') {
      await bot.sendMessage(msg.chat.id, languages[lang].congratulations, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "ЁЯОп Easy", callback_data: 'mode_easy' }],
            [{ text: "тЪб Medium", callback_data: 'mode_medium' }],
            [{ text: "ЁЯФе Hard", callback_data: 'mode_hard' }],
            [{ text: "ЁЯТА Hardcore", callback_data: 'mode_hardcore' }]
          ]
        }
      });
    }
    
    else if (data === 'check_deposit') {
      await bot.sendMessage(msg.chat.id, 
        `${languages[lang].enterPlayerId}\n\n${languages[lang].howToFind}`
      );
    }

    await bot.answerCallbackQuery(callbackQuery.id);
  } catch (error) {
    console.log('Callback error:', error);
    await bot.answerCallbackQuery(callbackQuery.id, { text: 'Error occurred' });
  }
});

// Send prediction function
async function sendPrediction(chatId, userId, mode, step) {
  const user = users[userId];
  const lang = user.language;
  const modeImages = predictionImages[mode];
  const randomImage = modeImages[Math.floor(Math.random() * modeImages.length)];
  
  try {
    await bot.sendPhoto(chatId, randomImage.url, {
      caption: `ЁЯСЖ BET ЁЯСЖ\n\n("CASH OUT" at this value or before)\nACCURACY:- ${randomImage.accuracy}\n\nStep: ${step}/20`,
      reply_markup: {
        inline_keyboard: [
          [{ text: "тЮбя╕П Next", callback_data: `next_${mode}` }],
          [{ text: "ЁЯУЛ Menu", callback_data: 'prediction_menu' }]
        ]
      }
    });
  } catch (error) {
    await bot.sendMessage(chatId, `ЁЯОп ${mode.toUpperCase()} Prediction ${step}/20\nAccuracy: ${randomImage.accuracy}\n\nStep: ${step}/20`, {
      reply_markup: {
        inline_keyboard: [
          [{ text: "тЮбя╕П Next", callback_data: `next_${mode}` }],
          [{ text: "ЁЯУЛ Menu", callback_data: 'prediction_menu' }]
        ]
      }
    });
  }
}

// Handle player ID input
bot.on('message', async (msg) => {
  if (msg.text && /^\d+$/.test(msg.text)) {
    const userId = msg.from.id.toString();
    const playerId = msg.text;
    const user = users[userId];
    const lang = user.language;
    
    user.playerId = playerId;
    
    const loadingMsg = await bot.sendMessage(msg.chat.id, languages[lang].checking);
    
    try {
      // Verify player with postback data
      const registration = postbackData.registrations[playerId];
      const deposit = postbackData.deposits[playerId];
      
      await bot.deleteMessage(msg.chat.id, loadingMsg.message_id);
      
      if (registration && deposit) {
        // Registered and deposited
        if (!user.registered) {
          user.registered = true;
          user.deposited = true;
          stats.registered++;
          stats.deposited++;
          await sendAdminNotification(`тЬЕ VERIFIED: ${userId}\nPlayer: ${playerId}\nDeposit: ${deposit.amount || 'N/A'}`);
        }
        
        await bot.sendMessage(msg.chat.id, `${languages[lang].verified}\n\n${languages[lang].congratulations}`, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "ЁЯОп Easy", callback_data: 'mode_easy' }],
              [{ text: "тЪб Medium", callback_data: 'mode_medium' }],
              [{ text: "ЁЯФе Hard", callback_data: 'mode_hard' }],
              [{ text: "ЁЯТА Hardcore", callback_data: 'mode_hardcore' }]
            ]
          }
        });
      } else if (registration && !deposit) {
        // Registered but no deposit
        if (!user.registered) {
          user.registered = true;
          stats.registered++;
        }
        
        await bot.sendMessage(msg.chat.id, languages[lang].registeredNoDeposit, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "ЁЯТ│ Deposit", url: AFFILIATE_LINK }],
              [{ text: "ЁЯФН Check Deposit", callback_data: 'check_deposit' }]
            ]
          }
        });
      } else {
        // Not registered
        await bot.sendMessage(msg.chat.id, languages[lang].notRegistered, {
          reply_markup: {
            inline_keyboard: [
              [{ text: "ЁЯУ▓ Register Now", url: AFFILIATE_LINK }]
            ]
          }
        });
      }
    } catch (error) {
      await bot.deleteMessage(msg.chat.id, loadingMsg.message_id);
      await bot.sendMessage(msg.chat.id, "тЭМ Verification failed. Please try again.");
    }
  }
});

// Daily motivational messages
cron.schedule('0 9 * * *', async () => {
  const messages = {
    en: "ЁЯЪА Don't miss today's winning predictions! Use /start now!",
    hi: "ЁЯЪА рдЖрдЬ рдХреА рдЬреАрддрдиреЗ рд╡рд╛рд▓реА рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгрд┐рдпрд╛рдБ рдордд рдЫреЛрдбрд╝реЗрдВ! /start рдЕрднреА!",
    bn: "ЁЯЪА ржЖржЬржХрзЗрж░ ржЬржпрж╝рзЗрж░ ржнржмрж┐рж╖рзНржпрждржмрж╛ржгрзА ржорж┐рж╕ ржХрж░ржмрзЗржи ржирж╛! /start ржПржЦржи!",
    ur: "ЁЯЪА ╪в╪м ┌й█М ╪м█М╪к┘Ж█Т ┘И╪з┘Д█М ┘╛█М╪┤┘Ж ┌п┘И╪ж█М┘И┌║ ┌й┘И ┘Е╪к ┌Ж┌╛┘И┌С█М┌║! /start ╪з╪и┌╛█М!",
    ne: "ЁЯЪА рдЖрдЬрдХрд╛ рдЬрд┐рддреНрдиреЗ рднрд╡рд┐рд╖реНрдпрд╡рд╛рдгреАрд╣рд░реВ рдирдЫреЛрдбреНрдиреБрд╣реЛрд╕реН! /start рдЕрд╣рд┐рд▓реЗ!"
  };
  
  for (const userId in users) {
    try {
      const lang = users[userId].language;
      await bot.sendMessage(userId, messages[lang] || messages.en, {
        reply_markup: {
          inline_keyboard: [
            [{ text: "ЁЯОп Get Predictions", callback_data: 'get_predictions' }]
          ]
        }
      });
    } catch (error) {
      // User might have blocked the bot
      delete users[userId];
    }
  }
});

// Manual webhook setup
app.get('/setup-webhook', async (req, res) => {
  try {
    await bot.setWebHook(`${VERCEL_URL}/webhook`);
    res.json({ success: true, message: 'Webhook set successfully' });
  } catch (error) {
    res.json({ success: false, error: error.message });
  }
});

// Stats endpoint
app.get('/stats', (req, res) => {
  res.json({
    botStats: stats,
    postbackStats: {
      registrations: Object.keys(postbackData.registrations).length,
      deposits: Object.keys(postbackData.deposits).length,
      approved: Object.keys(postbackData.approvedDeposits).length
    },
    userStats: {
      total: Object.keys(users).length,
      registered: Object.values(users).filter(u => u.registered).length,
      deposited: Object.values(users).filter(u => u.deposited).length
    }
  });
});

// Home route
app.get('/', (req, res) => {
  res.json({ 
    status: 'ЁЯЪА Chicken Predictor Bot - FULLY WORKING!',
    features: [
      '5 Languages Support',
      '1Win Postback Integration', 
      '4 Game Modes',
      'Daily Predictions',
      'Admin Notifications',
      'Player Verification'
    ],
    urls: {
      webhook: `${VERCEL_URL}/webhook`,
      postback: `${VERCEL_URL}/lwin-postback`,
      stats: `${VERCEL_URL}/stats`,
      setup: `${VERCEL_URL}/setup-webhook`
    }
  });
});

// Initialize
const PORT = process.env.PORT || 3000;
app.listen(PORT, async () => {
  console.log(`тЬЕ Chicken Predictor Bot running on port ${PORT}`);
  await setupWebhook();
});

module.exports = app;
